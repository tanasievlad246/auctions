# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input CreateOneUserDtoInput {
  """The record to create"""
  userDto: CreateUserDto!
}

input CreateUserDto {
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  role: String!
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Group by"""
enum GroupBy {
  DAY
  MONTH
  WEEK
  YEAR
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

type Mutation {
  createUser(input: CreateOneUserDtoInput!): UserDto!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type Query {
  user(
    """The id of the record to find."""
    id: ID!
  ): UserDto!
  userDtoAggregate(
    """Filter to find records to aggregate on"""
    filter: UserDtoAggregateFilter
  ): [UserDtoAggregateResponse!]!
  users(
    """Specify to filter the records returned."""
    filter: UserDtoFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [UserDtoSort!]! = []
  ): UserDtoConnection!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type UserDto {
  companyId: String!
  companyName: String!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  isActive: Boolean!
  lastName: String!
  phoneNumber: String!
  role: String!
  tenantOwner: Boolean!
  updatedAt: DateTime!
}

input UserDtoAggregateFilter {
  and: [UserDtoAggregateFilter!]
  companyId: StringFieldComparison
  companyName: StringFieldComparison
  createdAt: DateFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  lastName: StringFieldComparison
  or: [UserDtoAggregateFilter!]
  phoneNumber: StringFieldComparison
  role: StringFieldComparison
  tenantOwner: BooleanFieldComparison
  updatedAt: DateFieldComparison
}

type UserDtoAggregateGroupBy {
  companyId: String
  companyName: String
  createdAt(by: GroupBy! = DAY): DateTime
  email: String
  firstName: String
  id: ID
  isActive: Boolean
  lastName: String
  phoneNumber: String
  role: String
  tenantOwner: Boolean
  updatedAt(by: GroupBy! = DAY): DateTime
}

type UserDtoAggregateResponse {
  count: UserDtoCountAggregate
  groupBy: UserDtoAggregateGroupBy
  max: UserDtoMaxAggregate
  min: UserDtoMinAggregate
}

type UserDtoConnection {
  """Array of nodes."""
  nodes: [UserDto!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserDtoCountAggregate {
  companyId: Int
  companyName: Int
  createdAt: Int
  email: Int
  firstName: Int
  id: Int
  isActive: Int
  lastName: Int
  phoneNumber: Int
  role: Int
  tenantOwner: Int
  updatedAt: Int
}

input UserDtoFilter {
  and: [UserDtoFilter!]
  companyId: StringFieldComparison
  companyName: StringFieldComparison
  createdAt: DateFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  lastName: StringFieldComparison
  or: [UserDtoFilter!]
  phoneNumber: StringFieldComparison
  role: StringFieldComparison
  tenantOwner: BooleanFieldComparison
  updatedAt: DateFieldComparison
}

type UserDtoMaxAggregate {
  companyId: String
  companyName: String
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  phoneNumber: String
  role: String
  updatedAt: DateTime
}

type UserDtoMinAggregate {
  companyId: String
  companyName: String
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  phoneNumber: String
  role: String
  updatedAt: DateTime
}

input UserDtoSort {
  direction: SortDirection!
  field: UserDtoSortFields!
  nulls: SortNulls
}

enum UserDtoSortFields {
  companyId
  companyName
  createdAt
  email
  firstName
  id
  isActive
  lastName
  phoneNumber
  role
  tenantOwner
  updatedAt
}