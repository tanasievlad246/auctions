# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateOneUserDtoInput {
  """The record to create"""
  userDto: CreateUserDto!
}

input CreateUserDto {
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  role: String!
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

type Mutation {
  createUser(input: CreateOneUserDtoInput!): UserDto!
}

type Query {
  user(
    """The id of the record to find."""
    id: ID!
  ): UserDto
  users(
    """Specify to filter the records returned."""
    filter: UserDtoFilter! = {}

    """Specify to sort results."""
    sorting: [UserDtoSort!]! = []
  ): [UserDto!]!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type UserDto {
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  phoneNumber: String!
  role: String!
  updatedAt: DateTime!
}

type UserDtoAggregateGroupBy {
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  phoneNumber: String
  role: String
  updatedAt: DateTime
}

type UserDtoCountAggregate {
  createdAt: Int
  email: Int
  firstName: Int
  id: Int
  lastName: Int
  phoneNumber: Int
  role: Int
  updatedAt: Int
}

input UserDtoFilter {
  and: [UserDtoFilter!]
  createdAt: DateFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  id: IDFilterComparison
  lastName: StringFieldComparison
  or: [UserDtoFilter!]
  phoneNumber: StringFieldComparison
  role: StringFieldComparison
  updatedAt: DateFieldComparison
}

type UserDtoMaxAggregate {
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  phoneNumber: String
  role: String
  updatedAt: DateTime
}

type UserDtoMinAggregate {
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  phoneNumber: String
  role: String
  updatedAt: DateTime
}

input UserDtoSort {
  direction: SortDirection!
  field: UserDtoSortFields!
  nulls: SortNulls
}

enum UserDtoSortFields {
  createdAt
  email
  firstName
  id
  lastName
  phoneNumber
  role
  updatedAt
}