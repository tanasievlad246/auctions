services:
  gateway:
    container_name: gateway
    build:
      context: .
      dockerfile: ./apps/services/gateway/Dockerfile
      target: development
    restart: always
    ports:
      - 3000:3000
    volumes:
      - ./apps/services/gateway:/app/apps/services/gateway
    networks:
      - app_network
    depends_on:
      users:
        condition: service_healthy
      auctions:
        condition: service_healthy

  auctions-web:
    container_name: auctions-web
    build:
      context: .
      dockerfile: ./apps/auctions-web/Dockerfile
      target: development
    restart: always
    env_file: ./apps/auctions-web/.env
    ports:
      - 8080:8080
    volumes:
      - ./apps/auctions-web:/app/apps/auctions-web
    networks:
      - app_network
    environment:
      - GATEWAY_URL=http://gateway:3000

  auctions:
    container_name: auctions
    build:
      context: .
      dockerfile: ./apps/services/auctions/Dockerfile
      target: development
    restart: always
    env_file: ./apps/services/auctions/.env
    depends_on:
      - postgres
      - redis
    environment:
      - PORT=3001
    ports:
      - 3001:3001
    networks:
      - app_network
      - backend
    volumes:
      - ./apps/services/auctions:/app/apps/services/auctions
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3001/app/heartbeat"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  users:
    container_name: users
    build:
      context: .
      dockerfile: ./apps/services/users/Dockerfile
      target: development
    restart: always
    env_file: ./apps/services/users/.env
    depends_on:
      - postgres
      - redis
    environment:
      - PORT=3002
    ports:
      - 3002:3002
    networks:
      - app_network
      - backend
    volumes:
      - ./apps/services/users:/app/apps/services/users
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3002/app/heartbeat"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres:
    image: postgres:15
    restart: always
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=transport_auctions
    networks:
      - backend
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    container_name: redis
    image: redis:7
    ports:
      - '6379:6379'
    volumes:
      - ./data/redis:/data
      - ./redis/create-queues.sh:/docker-entrypoint-initdb.d/create-queues.sh
    command: ["/bin/bash", "-c", "redis-server --appendonly yes & sleep 5 && /docker-entrypoint-initdb.d/create-queues.sh && wait"]
    networks:
      - backend

networks:
  backend:
    driver: bridge
  app_network:
    driver: bridge
