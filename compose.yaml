services:
  users-service:
    build:
      context: .
      dockerfile: ./users-service/Dockerfile.dev
    ports:
      - '3002:3002'
    volumes:
      - ./users:/app/users
      - ./common:/app/common
      - users-service_node_modules:/app/users/node_modules
      - root_node_modules:/app/node_modules
    command: npm run start:dev
    env_file: ./users-service/.env
    networks:
      - backend
    depends_on:
      - postgres
      - redis

  gateway:
    build:
      context: .
      dockerfile: ./gateway/Dockerfile.dev
    ports:
      - '3000:3000'
    volumes:
      - ./gateway:/app/gateway
      - ./common:/app/common
      - gateway_node_modules:/app/gateway/node_modules
      - root_node_modules:/app/node_modules
    command: npm run start:dev
    env_file: ./gateway/.env
    networks:
      - backend
    depends_on:
      - postgres
      - redis
      - auctions-service
      - users-service

  auctions-service:
    build:
      context: .
      dockerfile: ./auctions-service/Dockerfile.dev
    ports:
      - '3001:3001'
    volumes:
      - ./auctions-service:/appauctions-service/
      - ./common:/app/common
      - auctions-service_node_modules:/app/auctions-service/node_modules
      - root_node_modules:/app/node_modules
    command: npm run start:dev
    env_file: ./auctions-service/.env
    networks:
      - backend
    depends_on:
      - postgres
      - redis

  auctions-client:
    build:
      context: ./auctions-client
      dockerfile: Dockerfile.dev
    ports:
      - '5173:5173'
    volumes:
      - ./auctions-client:/app
      - ./auctions-client/node_modules:/app/node_modules
    command: npm run dev
    environment:
      - NODE_ENV=development

  postgres:
    image: postgres:15
    restart: always
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=transport_auctions
    networks:
      - backend
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis:7
    ports:
      - '6379:6379'
    volumes:
      - ./data/redis:/data
      - ./redis/create-queues.sh:/docker-entrypoint-initdb.d/create-queues.sh
    command: ["/bin/bash", "-c", "redis-server --appendonly yes & sleep 5 && /docker-entrypoint-initdb.d/create-queues.sh && wait"]
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  auctions-service_node_modules:
  users-service_node_modules:
  gateway_node_modules:
  root_node_modules:
